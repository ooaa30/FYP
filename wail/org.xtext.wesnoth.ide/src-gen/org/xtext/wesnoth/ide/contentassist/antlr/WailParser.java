/*
 * generated by Xtext 2.21.0
 */
package org.xtext.wesnoth.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.wesnoth.ide.contentassist.antlr.internal.InternalWailParser;
import org.xtext.wesnoth.services.WailGrammarAccess;

public class WailParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(WailGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, WailGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getWhenRulesAccess().getAlternatives(), "rule__WhenRules__Alternatives");
			builder.put(grammarAccess.getDefualt_CAAccess().getCaTypeAlternatives_0(), "rule__Defualt_CA__CaTypeAlternatives_0");
			builder.put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
			builder.put(grammarAccess.getFragmentAccess().getGroup(), "rule__Fragment__Group__0");
			builder.put(grammarAccess.getConditionalAccess().getGroup(), "rule__Conditional__Group__0");
			builder.put(grammarAccess.getDamageAccess().getGroup(), "rule__Damage__Group__0");
			builder.put(grammarAccess.getAtLocationAccess().getGroup(), "rule__AtLocation__Group__0");
			builder.put(grammarAccess.getUnitEqualsAccess().getGroup(), "rule__UnitEquals__Group__0");
			builder.put(grammarAccess.getGoalAccess().getGroup(), "rule__Goal__Group__0");
			builder.put(grammarAccess.getGoaLocationAccess().getGroup(), "rule__GoaLocation__Group__0");
			builder.put(grammarAccess.getModelAccess().getElementsAssignment(), "rule__Model__ElementsAssignment");
			builder.put(grammarAccess.getRuleAccess().getNameAssignment_1(), "rule__Rule__NameAssignment_1");
			builder.put(grammarAccess.getRuleAccess().getFragmentsAssignment_3(), "rule__Rule__FragmentsAssignment_3");
			builder.put(grammarAccess.getRuleAccess().getGoalsAssignment_4(), "rule__Rule__GoalsAssignment_4");
			builder.put(grammarAccess.getFragmentAccess().getConditionAssignment_0(), "rule__Fragment__ConditionAssignment_0");
			builder.put(grammarAccess.getFragmentAccess().getDefualt_casAssignment_2(), "rule__Fragment__Defualt_casAssignment_2");
			builder.put(grammarAccess.getConditionalAccess().getXAssignment_1(), "rule__Conditional__XAssignment_1");
			builder.put(grammarAccess.getBaselineAccess().getAlwaysAssignment(), "rule__Baseline__AlwaysAssignment");
			builder.put(grammarAccess.getDamageAccess().getHealthAssignment_2(), "rule__Damage__HealthAssignment_2");
			builder.put(grammarAccess.getAtLocationAccess().getXAxisAssignment_1(), "rule__AtLocation__XAxisAssignment_1");
			builder.put(grammarAccess.getAtLocationAccess().getYAxisAssignment_3(), "rule__AtLocation__YAxisAssignment_3");
			builder.put(grammarAccess.getUnitEqualsAccess().getUnitAssignment_2(), "rule__UnitEquals__UnitAssignment_2");
			builder.put(grammarAccess.getGoalAccess().getGoalAssignment_2(), "rule__Goal__GoalAssignment_2");
			builder.put(grammarAccess.getGoalAccess().getLocValueAssignment_5(), "rule__Goal__LocValueAssignment_5");
			builder.put(grammarAccess.getGoaLocationAccess().getXAxisAssignment_1(), "rule__GoaLocation__XAxisAssignment_1");
			builder.put(grammarAccess.getGoaLocationAccess().getYAxisAssignment_3(), "rule__GoaLocation__YAxisAssignment_3");
			builder.put(grammarAccess.getDefualt_CAAccess().getCaTypeAssignment(), "rule__Defualt_CA__CaTypeAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private WailGrammarAccess grammarAccess;

	@Override
	protected InternalWailParser createParser() {
		InternalWailParser result = new InternalWailParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public WailGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(WailGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
