/*
 * generated by Xtext 2.20.0
 */
package fyp.xtext.wesnoth.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WesnothDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fyp.xtext.wesnoth.mydsl.WesnothDSL.Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsRuleParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//	elements+=Rule*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Rule*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Rule
		public RuleCall getElementsRuleParserRuleCall_0() { return cElementsRuleParserRuleCall_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fyp.xtext.wesnoth.mydsl.WesnothDSL.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUnitIDAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUnitIDUnitIDParserRuleCall_3_0 = (RuleCall)cUnitIDAssignment_3.eContents().get(0);
		private final Assignment cDefualt_casAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefualt_casDefualt_CAParserRuleCall_4_0 = (RuleCall)cDefualt_casAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Rule:
		//	'rule' name=ID
		//	'{'
		//	unitID=UnitID
		//	defualt_cas+=Defualt_CA*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'rule' name=ID '{' unitID=UnitID defualt_cas+=Defualt_CA* '}'
		public Group getGroup() { return cGroup; }
		
		//'rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//unitID=UnitID
		public Assignment getUnitIDAssignment_3() { return cUnitIDAssignment_3; }
		
		//UnitID
		public RuleCall getUnitIDUnitIDParserRuleCall_3_0() { return cUnitIDUnitIDParserRuleCall_3_0; }
		
		//defualt_cas+=Defualt_CA*
		public Assignment getDefualt_casAssignment_4() { return cDefualt_casAssignment_4; }
		
		//Defualt_CA
		public RuleCall getDefualt_casDefualt_CAParserRuleCall_4_0() { return cDefualt_casDefualt_CAParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class UnitIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fyp.xtext.wesnoth.mydsl.WesnothDSL.UnitID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnitIDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//UnitID:
		//	'unitID' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'unitID' name=ID
		public Group getGroup() { return cGroup; }
		
		//'unitID'
		public Keyword getUnitIDKeyword_0() { return cUnitIDKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class GoalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fyp.xtext.wesnoth.mydsl.WesnothDSL.Goal");
		private final Keyword cGoalKeyword = (Keyword)rule.eContents().get(1);
		
		////TODO research and implement "Attributes" Like aggressiveness and stuff
		////TODO add in options for the existing goals, sub rules?
		//Goal:
		//	'goal';
		@Override public ParserRule getRule() { return rule; }
		
		//'goal'
		public Keyword getGoalKeyword() { return cGoalKeyword; }
	}
	public class New_CAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fyp.xtext.wesnoth.mydsl.WesnothDSL.New_CA");
		private final Keyword cNewCAKeyword = (Keyword)rule.eContents().get(1);
		
		//New_CA:
		//	'newCA';
		@Override public ParserRule getRule() { return rule; }
		
		//'newCA'
		public Keyword getNewCAKeyword() { return cNewCAKeyword; }
	}
	public class Defualt_CAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fyp.xtext.wesnoth.mydsl.WesnothDSL.Defualt_CA");
		private final Assignment cCaTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cCaTypeAlternatives_0 = (Alternatives)cCaTypeAssignment.eContents().get(0);
		private final Keyword cCaTypeMovementKeyword_0_0 = (Keyword)cCaTypeAlternatives_0.eContents().get(0);
		private final Keyword cCaTypeRetreatKeyword_0_1 = (Keyword)cCaTypeAlternatives_0.eContents().get(1);
		private final Keyword cCaTypeMove_to_targetKeyword_0_2 = (Keyword)cCaTypeAlternatives_0.eContents().get(2);
		private final Keyword cCaTypeCombatKeyword_0_3 = (Keyword)cCaTypeAlternatives_0.eContents().get(3);
		private final Keyword cCaTypeRecruitKeyword_0_4 = (Keyword)cCaTypeAlternatives_0.eContents().get(4);
		private final Keyword cCaTypeFocus_high_XPKeyword_0_5 = (Keyword)cCaTypeAlternatives_0.eContents().get(5);
		private final Keyword cCaTypeMove_to_enemyKeyword_0_6 = (Keyword)cCaTypeAlternatives_0.eContents().get(6);
		private final Keyword cCaTypeCapture_villagesKeyword_0_7 = (Keyword)cCaTypeAlternatives_0.eContents().get(7);
		
		//Defualt_CA:
		//	caType=("movement" | "retreat" | "move_to_target" | "combat" | "recruit" | "focus_high_XP" | "move_to_enemy" |
		//	"capture_villages");
		@Override public ParserRule getRule() { return rule; }
		
		//caType=("movement" | "retreat" | "move_to_target" | "combat" | "recruit" | "focus_high_XP" | "move_to_enemy" |
		//"capture_villages")
		public Assignment getCaTypeAssignment() { return cCaTypeAssignment; }
		
		//("movement" | "retreat" | "move_to_target" | "combat" | "recruit" | "focus_high_XP" | "move_to_enemy" |
		//"capture_villages")
		public Alternatives getCaTypeAlternatives_0() { return cCaTypeAlternatives_0; }
		
		//"movement"
		public Keyword getCaTypeMovementKeyword_0_0() { return cCaTypeMovementKeyword_0_0; }
		
		//"retreat"
		public Keyword getCaTypeRetreatKeyword_0_1() { return cCaTypeRetreatKeyword_0_1; }
		
		//"move_to_target"
		public Keyword getCaTypeMove_to_targetKeyword_0_2() { return cCaTypeMove_to_targetKeyword_0_2; }
		
		//"combat"
		public Keyword getCaTypeCombatKeyword_0_3() { return cCaTypeCombatKeyword_0_3; }
		
		//"recruit"
		public Keyword getCaTypeRecruitKeyword_0_4() { return cCaTypeRecruitKeyword_0_4; }
		
		//"focus_high_XP"
		public Keyword getCaTypeFocus_high_XPKeyword_0_5() { return cCaTypeFocus_high_XPKeyword_0_5; }
		
		//"move_to_enemy"
		public Keyword getCaTypeMove_to_enemyKeyword_0_6() { return cCaTypeMove_to_enemyKeyword_0_6; }
		
		//"capture_villages"
		public Keyword getCaTypeCapture_villagesKeyword_0_7() { return cCaTypeCapture_villagesKeyword_0_7; }
	}
	
	
	private final ModelElements pModel;
	private final RuleElements pRule;
	private final UnitIDElements pUnitID;
	private final GoalElements pGoal;
	private final New_CAElements pNew_CA;
	private final Defualt_CAElements pDefualt_CA;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WesnothDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pRule = new RuleElements();
		this.pUnitID = new UnitIDElements();
		this.pGoal = new GoalElements();
		this.pNew_CA = new New_CAElements();
		this.pDefualt_CA = new Defualt_CAElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fyp.xtext.wesnoth.mydsl.WesnothDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	elements+=Rule*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Rule:
	//	'rule' name=ID
	//	'{'
	//	unitID=UnitID
	//	defualt_cas+=Defualt_CA*
	//	'}';
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//UnitID:
	//	'unitID' name=ID;
	public UnitIDElements getUnitIDAccess() {
		return pUnitID;
	}
	
	public ParserRule getUnitIDRule() {
		return getUnitIDAccess().getRule();
	}
	
	////TODO research and implement "Attributes" Like aggressiveness and stuff
	////TODO add in options for the existing goals, sub rules?
	//Goal:
	//	'goal';
	public GoalElements getGoalAccess() {
		return pGoal;
	}
	
	public ParserRule getGoalRule() {
		return getGoalAccess().getRule();
	}
	
	//New_CA:
	//	'newCA';
	public New_CAElements getNew_CAAccess() {
		return pNew_CA;
	}
	
	public ParserRule getNew_CARule() {
		return getNew_CAAccess().getRule();
	}
	
	//Defualt_CA:
	//	caType=("movement" | "retreat" | "move_to_target" | "combat" | "recruit" | "focus_high_XP" | "move_to_enemy" |
	//	"capture_villages");
	public Defualt_CAElements getDefualt_CAAccess() {
		return pDefualt_CA;
	}
	
	public ParserRule getDefualt_CARule() {
		return getDefualt_CAAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
