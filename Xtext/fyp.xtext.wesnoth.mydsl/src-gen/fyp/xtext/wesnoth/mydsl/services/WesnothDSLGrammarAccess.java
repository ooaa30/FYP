/*
 * generated by Xtext 2.20.0
 */
package fyp.xtext.wesnoth.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WesnothDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fyp.xtext.wesnoth.mydsl.WesnothDSL.Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsRuleParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//	elements+=Rule*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Rule*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Rule
		public RuleCall getElementsRuleParserRuleCall_0() { return cElementsRuleParserRuleCall_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fyp.xtext.wesnoth.mydsl.WesnothDSL.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUnitIDAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUnitIDUnitIDParserRuleCall_3_0 = (RuleCall)cUnitIDAssignment_3.eContents().get(0);
		private final Assignment cBehavioursAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBehavioursBehaviourParserRuleCall_4_0 = (RuleCall)cBehavioursAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Rule:
		//	'rule' name=ID
		//	'{'
		//	unitID=UnitID
		//	behaviours+=Behaviour*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'rule' name=ID '{' unitID=UnitID behaviours+=Behaviour* '}'
		public Group getGroup() { return cGroup; }
		
		//'rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//unitID=UnitID
		public Assignment getUnitIDAssignment_3() { return cUnitIDAssignment_3; }
		
		//UnitID
		public RuleCall getUnitIDUnitIDParserRuleCall_3_0() { return cUnitIDUnitIDParserRuleCall_3_0; }
		
		//behaviours+=Behaviour*
		public Assignment getBehavioursAssignment_4() { return cBehavioursAssignment_4; }
		
		//Behaviour
		public RuleCall getBehavioursBehaviourParserRuleCall_4_0() { return cBehavioursBehaviourParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class UnitIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fyp.xtext.wesnoth.mydsl.WesnothDSL.UnitID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnitIDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//UnitID:
		//	'unitID' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'unitID' name=ID
		public Group getGroup() { return cGroup; }
		
		//'unitID'
		public Keyword getUnitIDKeyword_0() { return cUnitIDKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class BehaviourElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fyp.xtext.wesnoth.mydsl.WesnothDSL.Behaviour");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGoalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCandidate_ActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Behaviour:
		//	Goal | Candidate_Action;
		@Override public ParserRule getRule() { return rule; }
		
		//Goal | Candidate_Action
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Goal
		public RuleCall getGoalParserRuleCall_0() { return cGoalParserRuleCall_0; }
		
		//Candidate_Action
		public RuleCall getCandidate_ActionParserRuleCall_1() { return cCandidate_ActionParserRuleCall_1; }
	}
	public class GoalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fyp.xtext.wesnoth.mydsl.WesnothDSL.Goal");
		private final Keyword cGoalKeyword = (Keyword)rule.eContents().get(1);
		
		////TODO research and implement "Attributes" Like aggressiveness and stuff
		////TODO add in options for the existing goals, sub rules?
		//Goal:
		//	'goal';
		@Override public ParserRule getRule() { return rule; }
		
		//'goal'
		public Keyword getGoalKeyword() { return cGoalKeyword; }
	}
	public class Candidate_ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fyp.xtext.wesnoth.mydsl.WesnothDSL.Candidate_Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNew_CAParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefualt_CAParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Candidate_Action:
		//	New_CA | Defualt_CA;
		@Override public ParserRule getRule() { return rule; }
		
		//New_CA | Defualt_CA
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//New_CA
		public RuleCall getNew_CAParserRuleCall_0() { return cNew_CAParserRuleCall_0; }
		
		//Defualt_CA
		public RuleCall getDefualt_CAParserRuleCall_1() { return cDefualt_CAParserRuleCall_1; }
	}
	public class New_CAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fyp.xtext.wesnoth.mydsl.WesnothDSL.New_CA");
		private final Keyword cNewCAKeyword = (Keyword)rule.eContents().get(1);
		
		//New_CA:
		//	'newCA';
		@Override public ParserRule getRule() { return rule; }
		
		//'newCA'
		public Keyword getNewCAKeyword() { return cNewCAKeyword; }
	}
	public class Defualt_CAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fyp.xtext.wesnoth.mydsl.WesnothDSL.Defualt_CA");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMovementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRetreatParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMove_To_TargetParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCombatParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRecruitParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFocus_High_XPParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMove_To_EnemyParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cCapture_VillagesParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Defualt_CA:
		//	Movement | Retreat | Move_To_Target | Combat | Recruit | Focus_High_XP | Move_To_Enemy | Capture_Villages;
		@Override public ParserRule getRule() { return rule; }
		
		//Movement | Retreat | Move_To_Target | Combat | Recruit | Focus_High_XP | Move_To_Enemy | Capture_Villages
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Movement
		public RuleCall getMovementParserRuleCall_0() { return cMovementParserRuleCall_0; }
		
		//Retreat
		public RuleCall getRetreatParserRuleCall_1() { return cRetreatParserRuleCall_1; }
		
		//Move_To_Target
		public RuleCall getMove_To_TargetParserRuleCall_2() { return cMove_To_TargetParserRuleCall_2; }
		
		//Combat
		public RuleCall getCombatParserRuleCall_3() { return cCombatParserRuleCall_3; }
		
		//Recruit
		public RuleCall getRecruitParserRuleCall_4() { return cRecruitParserRuleCall_4; }
		
		//Focus_High_XP
		public RuleCall getFocus_High_XPParserRuleCall_5() { return cFocus_High_XPParserRuleCall_5; }
		
		//Move_To_Enemy
		public RuleCall getMove_To_EnemyParserRuleCall_6() { return cMove_To_EnemyParserRuleCall_6; }
		
		//Capture_Villages
		public RuleCall getCapture_VillagesParserRuleCall_7() { return cCapture_VillagesParserRuleCall_7; }
	}
	public class MovementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fyp.xtext.wesnoth.mydsl.WesnothDSL.Movement");
		private final Keyword cMovementKeyword = (Keyword)rule.eContents().get(1);
		
		//Movement:
		//	'movement';
		@Override public ParserRule getRule() { return rule; }
		
		//'movement'
		public Keyword getMovementKeyword() { return cMovementKeyword; }
	}
	public class RetreatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fyp.xtext.wesnoth.mydsl.WesnothDSL.Retreat");
		private final Keyword cRetreatKeyword = (Keyword)rule.eContents().get(1);
		
		//Retreat:
		//	'retreat';
		@Override public ParserRule getRule() { return rule; }
		
		//'retreat'
		public Keyword getRetreatKeyword() { return cRetreatKeyword; }
	}
	public class Move_To_TargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fyp.xtext.wesnoth.mydsl.WesnothDSL.Move_To_Target");
		private final Keyword cMove_to_targetKeyword = (Keyword)rule.eContents().get(1);
		
		//Move_To_Target:
		//	'move_to_target';
		@Override public ParserRule getRule() { return rule; }
		
		//'move_to_target'
		public Keyword getMove_to_targetKeyword() { return cMove_to_targetKeyword; }
	}
	public class CombatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fyp.xtext.wesnoth.mydsl.WesnothDSL.Combat");
		private final Keyword cCombatKeyword = (Keyword)rule.eContents().get(1);
		
		//Combat:
		//	'combat';
		@Override public ParserRule getRule() { return rule; }
		
		//'combat'
		public Keyword getCombatKeyword() { return cCombatKeyword; }
	}
	public class RecruitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fyp.xtext.wesnoth.mydsl.WesnothDSL.Recruit");
		private final Keyword cRecruitKeyword = (Keyword)rule.eContents().get(1);
		
		//Recruit:
		//	'recruit';
		@Override public ParserRule getRule() { return rule; }
		
		//'recruit'
		public Keyword getRecruitKeyword() { return cRecruitKeyword; }
	}
	public class Focus_High_XPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fyp.xtext.wesnoth.mydsl.WesnothDSL.Focus_High_XP");
		private final Keyword cFocus_high_xpKeyword = (Keyword)rule.eContents().get(1);
		
		//Focus_High_XP:
		//	'focus_high_xp';
		@Override public ParserRule getRule() { return rule; }
		
		//'focus_high_xp'
		public Keyword getFocus_high_xpKeyword() { return cFocus_high_xpKeyword; }
	}
	public class Move_To_EnemyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fyp.xtext.wesnoth.mydsl.WesnothDSL.Move_To_Enemy");
		private final Keyword cMove_to_enemyKeyword = (Keyword)rule.eContents().get(1);
		
		//Move_To_Enemy:
		//	'move_to_enemy';
		@Override public ParserRule getRule() { return rule; }
		
		//'move_to_enemy'
		public Keyword getMove_to_enemyKeyword() { return cMove_to_enemyKeyword; }
	}
	public class Capture_VillagesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fyp.xtext.wesnoth.mydsl.WesnothDSL.Capture_Villages");
		private final Keyword cCapture_villagesKeyword = (Keyword)rule.eContents().get(1);
		
		//Capture_Villages:
		//	'capture_villages';
		@Override public ParserRule getRule() { return rule; }
		
		//'capture_villages'
		public Keyword getCapture_villagesKeyword() { return cCapture_villagesKeyword; }
	}
	
	
	private final ModelElements pModel;
	private final RuleElements pRule;
	private final UnitIDElements pUnitID;
	private final BehaviourElements pBehaviour;
	private final GoalElements pGoal;
	private final Candidate_ActionElements pCandidate_Action;
	private final New_CAElements pNew_CA;
	private final Defualt_CAElements pDefualt_CA;
	private final MovementElements pMovement;
	private final RetreatElements pRetreat;
	private final Move_To_TargetElements pMove_To_Target;
	private final CombatElements pCombat;
	private final RecruitElements pRecruit;
	private final Focus_High_XPElements pFocus_High_XP;
	private final Move_To_EnemyElements pMove_To_Enemy;
	private final Capture_VillagesElements pCapture_Villages;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WesnothDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pRule = new RuleElements();
		this.pUnitID = new UnitIDElements();
		this.pBehaviour = new BehaviourElements();
		this.pGoal = new GoalElements();
		this.pCandidate_Action = new Candidate_ActionElements();
		this.pNew_CA = new New_CAElements();
		this.pDefualt_CA = new Defualt_CAElements();
		this.pMovement = new MovementElements();
		this.pRetreat = new RetreatElements();
		this.pMove_To_Target = new Move_To_TargetElements();
		this.pCombat = new CombatElements();
		this.pRecruit = new RecruitElements();
		this.pFocus_High_XP = new Focus_High_XPElements();
		this.pMove_To_Enemy = new Move_To_EnemyElements();
		this.pCapture_Villages = new Capture_VillagesElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fyp.xtext.wesnoth.mydsl.WesnothDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	elements+=Rule*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Rule:
	//	'rule' name=ID
	//	'{'
	//	unitID=UnitID
	//	behaviours+=Behaviour*
	//	'}';
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//UnitID:
	//	'unitID' name=ID;
	public UnitIDElements getUnitIDAccess() {
		return pUnitID;
	}
	
	public ParserRule getUnitIDRule() {
		return getUnitIDAccess().getRule();
	}
	
	//Behaviour:
	//	Goal | Candidate_Action;
	public BehaviourElements getBehaviourAccess() {
		return pBehaviour;
	}
	
	public ParserRule getBehaviourRule() {
		return getBehaviourAccess().getRule();
	}
	
	////TODO research and implement "Attributes" Like aggressiveness and stuff
	////TODO add in options for the existing goals, sub rules?
	//Goal:
	//	'goal';
	public GoalElements getGoalAccess() {
		return pGoal;
	}
	
	public ParserRule getGoalRule() {
		return getGoalAccess().getRule();
	}
	
	//Candidate_Action:
	//	New_CA | Defualt_CA;
	public Candidate_ActionElements getCandidate_ActionAccess() {
		return pCandidate_Action;
	}
	
	public ParserRule getCandidate_ActionRule() {
		return getCandidate_ActionAccess().getRule();
	}
	
	//New_CA:
	//	'newCA';
	public New_CAElements getNew_CAAccess() {
		return pNew_CA;
	}
	
	public ParserRule getNew_CARule() {
		return getNew_CAAccess().getRule();
	}
	
	//Defualt_CA:
	//	Movement | Retreat | Move_To_Target | Combat | Recruit | Focus_High_XP | Move_To_Enemy | Capture_Villages;
	public Defualt_CAElements getDefualt_CAAccess() {
		return pDefualt_CA;
	}
	
	public ParserRule getDefualt_CARule() {
		return getDefualt_CAAccess().getRule();
	}
	
	//Movement:
	//	'movement';
	public MovementElements getMovementAccess() {
		return pMovement;
	}
	
	public ParserRule getMovementRule() {
		return getMovementAccess().getRule();
	}
	
	//Retreat:
	//	'retreat';
	public RetreatElements getRetreatAccess() {
		return pRetreat;
	}
	
	public ParserRule getRetreatRule() {
		return getRetreatAccess().getRule();
	}
	
	//Move_To_Target:
	//	'move_to_target';
	public Move_To_TargetElements getMove_To_TargetAccess() {
		return pMove_To_Target;
	}
	
	public ParserRule getMove_To_TargetRule() {
		return getMove_To_TargetAccess().getRule();
	}
	
	//Combat:
	//	'combat';
	public CombatElements getCombatAccess() {
		return pCombat;
	}
	
	public ParserRule getCombatRule() {
		return getCombatAccess().getRule();
	}
	
	//Recruit:
	//	'recruit';
	public RecruitElements getRecruitAccess() {
		return pRecruit;
	}
	
	public ParserRule getRecruitRule() {
		return getRecruitAccess().getRule();
	}
	
	//Focus_High_XP:
	//	'focus_high_xp';
	public Focus_High_XPElements getFocus_High_XPAccess() {
		return pFocus_High_XP;
	}
	
	public ParserRule getFocus_High_XPRule() {
		return getFocus_High_XPAccess().getRule();
	}
	
	//Move_To_Enemy:
	//	'move_to_enemy';
	public Move_To_EnemyElements getMove_To_EnemyAccess() {
		return pMove_To_Enemy;
	}
	
	public ParserRule getMove_To_EnemyRule() {
		return getMove_To_EnemyAccess().getRule();
	}
	
	//Capture_Villages:
	//	'capture_villages';
	public Capture_VillagesElements getCapture_VillagesAccess() {
		return pCapture_Villages;
	}
	
	public ParserRule getCapture_VillagesRule() {
		return getCapture_VillagesAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
