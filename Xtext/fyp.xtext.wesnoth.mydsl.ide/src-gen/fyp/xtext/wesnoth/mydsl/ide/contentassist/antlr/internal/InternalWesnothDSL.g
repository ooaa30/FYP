/*
 * generated by Xtext 2.20.0
 */
grammar InternalWesnothDSL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package fyp.xtext.wesnoth.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fyp.xtext.wesnoth.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import fyp.xtext.wesnoth.mydsl.services.WesnothDSLGrammarAccess;

}
@parser::members {
	private WesnothDSLGrammarAccess grammarAccess;

	public void setGrammarAccess(WesnothDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getElementsAssignment()); }
		(rule__Model__ElementsAssignment)*
		{ after(grammarAccess.getModelAccess().getElementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRule
entryRuleRule
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleAccess().getGroup()); }
		(rule__Rule__Group__0)
		{ after(grammarAccess.getRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnitID
entryRuleUnitID
:
{ before(grammarAccess.getUnitIDRule()); }
	 ruleUnitID
{ after(grammarAccess.getUnitIDRule()); } 
	 EOF 
;

// Rule UnitID
ruleUnitID 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnitIDAccess().getGroup()); }
		(rule__UnitID__Group__0)
		{ after(grammarAccess.getUnitIDAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBehaviour
entryRuleBehaviour
:
{ before(grammarAccess.getBehaviourRule()); }
	 ruleBehaviour
{ after(grammarAccess.getBehaviourRule()); } 
	 EOF 
;

// Rule Behaviour
ruleBehaviour 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBehaviourAccess().getAlternatives()); }
		(rule__Behaviour__Alternatives)
		{ after(grammarAccess.getBehaviourAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGoal
entryRuleGoal
:
{ before(grammarAccess.getGoalRule()); }
	 ruleGoal
{ after(grammarAccess.getGoalRule()); } 
	 EOF 
;

// Rule Goal
ruleGoal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGoalAccess().getGoalKeyword()); }
		'goal'
		{ after(grammarAccess.getGoalAccess().getGoalKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCandidate_Action
entryRuleCandidate_Action
:
{ before(grammarAccess.getCandidate_ActionRule()); }
	 ruleCandidate_Action
{ after(grammarAccess.getCandidate_ActionRule()); } 
	 EOF 
;

// Rule Candidate_Action
ruleCandidate_Action 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCandidate_ActionAccess().getAlternatives()); }
		(rule__Candidate_Action__Alternatives)
		{ after(grammarAccess.getCandidate_ActionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNew_CA
entryRuleNew_CA
:
{ before(grammarAccess.getNew_CARule()); }
	 ruleNew_CA
{ after(grammarAccess.getNew_CARule()); } 
	 EOF 
;

// Rule New_CA
ruleNew_CA 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNew_CAAccess().getNewCAKeyword()); }
		'newCA'
		{ after(grammarAccess.getNew_CAAccess().getNewCAKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDefualt_CA
entryRuleDefualt_CA
:
{ before(grammarAccess.getDefualt_CARule()); }
	 ruleDefualt_CA
{ after(grammarAccess.getDefualt_CARule()); } 
	 EOF 
;

// Rule Defualt_CA
ruleDefualt_CA 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefualt_CAAccess().getAlternatives()); }
		(rule__Defualt_CA__Alternatives)
		{ after(grammarAccess.getDefualt_CAAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMovement
entryRuleMovement
:
{ before(grammarAccess.getMovementRule()); }
	 ruleMovement
{ after(grammarAccess.getMovementRule()); } 
	 EOF 
;

// Rule Movement
ruleMovement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMovementAccess().getMovementKeyword()); }
		'movement'
		{ after(grammarAccess.getMovementAccess().getMovementKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRetreat
entryRuleRetreat
:
{ before(grammarAccess.getRetreatRule()); }
	 ruleRetreat
{ after(grammarAccess.getRetreatRule()); } 
	 EOF 
;

// Rule Retreat
ruleRetreat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRetreatAccess().getRetreatKeyword()); }
		'retreat'
		{ after(grammarAccess.getRetreatAccess().getRetreatKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMove_To_Target
entryRuleMove_To_Target
:
{ before(grammarAccess.getMove_To_TargetRule()); }
	 ruleMove_To_Target
{ after(grammarAccess.getMove_To_TargetRule()); } 
	 EOF 
;

// Rule Move_To_Target
ruleMove_To_Target 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMove_To_TargetAccess().getMove_to_targetKeyword()); }
		'move_to_target'
		{ after(grammarAccess.getMove_To_TargetAccess().getMove_to_targetKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCombat
entryRuleCombat
:
{ before(grammarAccess.getCombatRule()); }
	 ruleCombat
{ after(grammarAccess.getCombatRule()); } 
	 EOF 
;

// Rule Combat
ruleCombat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCombatAccess().getCombatKeyword()); }
		'combat'
		{ after(grammarAccess.getCombatAccess().getCombatKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRecruit
entryRuleRecruit
:
{ before(grammarAccess.getRecruitRule()); }
	 ruleRecruit
{ after(grammarAccess.getRecruitRule()); } 
	 EOF 
;

// Rule Recruit
ruleRecruit 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRecruitAccess().getRecruitKeyword()); }
		'recruit'
		{ after(grammarAccess.getRecruitAccess().getRecruitKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFocus_High_XP
entryRuleFocus_High_XP
:
{ before(grammarAccess.getFocus_High_XPRule()); }
	 ruleFocus_High_XP
{ after(grammarAccess.getFocus_High_XPRule()); } 
	 EOF 
;

// Rule Focus_High_XP
ruleFocus_High_XP 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFocus_High_XPAccess().getFocus_high_xpKeyword()); }
		'focus_high_xp'
		{ after(grammarAccess.getFocus_High_XPAccess().getFocus_high_xpKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMove_To_Enemy
entryRuleMove_To_Enemy
:
{ before(grammarAccess.getMove_To_EnemyRule()); }
	 ruleMove_To_Enemy
{ after(grammarAccess.getMove_To_EnemyRule()); } 
	 EOF 
;

// Rule Move_To_Enemy
ruleMove_To_Enemy 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMove_To_EnemyAccess().getMove_to_enemyKeyword()); }
		'move_to_enemy'
		{ after(grammarAccess.getMove_To_EnemyAccess().getMove_to_enemyKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCapture_Villages
entryRuleCapture_Villages
:
{ before(grammarAccess.getCapture_VillagesRule()); }
	 ruleCapture_Villages
{ after(grammarAccess.getCapture_VillagesRule()); } 
	 EOF 
;

// Rule Capture_Villages
ruleCapture_Villages 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCapture_VillagesAccess().getCapture_villagesKeyword()); }
		'capture_villages'
		{ after(grammarAccess.getCapture_VillagesAccess().getCapture_villagesKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Behaviour__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBehaviourAccess().getGoalParserRuleCall_0()); }
		ruleGoal
		{ after(grammarAccess.getBehaviourAccess().getGoalParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBehaviourAccess().getCandidate_ActionParserRuleCall_1()); }
		ruleCandidate_Action
		{ after(grammarAccess.getBehaviourAccess().getCandidate_ActionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Candidate_Action__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCandidate_ActionAccess().getNew_CAParserRuleCall_0()); }
		ruleNew_CA
		{ after(grammarAccess.getCandidate_ActionAccess().getNew_CAParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCandidate_ActionAccess().getDefualt_CAParserRuleCall_1()); }
		ruleDefualt_CA
		{ after(grammarAccess.getCandidate_ActionAccess().getDefualt_CAParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Defualt_CA__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefualt_CAAccess().getMovementParserRuleCall_0()); }
		ruleMovement
		{ after(grammarAccess.getDefualt_CAAccess().getMovementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDefualt_CAAccess().getRetreatParserRuleCall_1()); }
		ruleRetreat
		{ after(grammarAccess.getDefualt_CAAccess().getRetreatParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getDefualt_CAAccess().getMove_To_TargetParserRuleCall_2()); }
		ruleMove_To_Target
		{ after(grammarAccess.getDefualt_CAAccess().getMove_To_TargetParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getDefualt_CAAccess().getCombatParserRuleCall_3()); }
		ruleCombat
		{ after(grammarAccess.getDefualt_CAAccess().getCombatParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getDefualt_CAAccess().getRecruitParserRuleCall_4()); }
		ruleRecruit
		{ after(grammarAccess.getDefualt_CAAccess().getRecruitParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getDefualt_CAAccess().getFocus_High_XPParserRuleCall_5()); }
		ruleFocus_High_XP
		{ after(grammarAccess.getDefualt_CAAccess().getFocus_High_XPParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getDefualt_CAAccess().getMove_To_EnemyParserRuleCall_6()); }
		ruleMove_To_Enemy
		{ after(grammarAccess.getDefualt_CAAccess().getMove_To_EnemyParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getDefualt_CAAccess().getCapture_VillagesParserRuleCall_7()); }
		ruleCapture_Villages
		{ after(grammarAccess.getDefualt_CAAccess().getCapture_VillagesParserRuleCall_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getRuleKeyword_0()); }
	'rule'
	{ after(grammarAccess.getRuleAccess().getRuleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getNameAssignment_1()); }
	(rule__Rule__NameAssignment_1)
	{ after(grammarAccess.getRuleAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__2__Impl
	rule__Rule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__3__Impl
	rule__Rule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getUnitIDAssignment_3()); }
	(rule__Rule__UnitIDAssignment_3)
	{ after(grammarAccess.getRuleAccess().getUnitIDAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__4__Impl
	rule__Rule__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getBehavioursAssignment_4()); }
	(rule__Rule__BehavioursAssignment_4)*
	{ after(grammarAccess.getRuleAccess().getBehavioursAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnitID__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnitID__Group__0__Impl
	rule__UnitID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitID__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnitIDAccess().getUnitIDKeyword_0()); }
	'unitID'
	{ after(grammarAccess.getUnitIDAccess().getUnitIDKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitID__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnitID__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitID__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnitIDAccess().getNameAssignment_1()); }
	(rule__UnitID__NameAssignment_1)
	{ after(grammarAccess.getUnitIDAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ElementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getElementsRuleParserRuleCall_0()); }
		ruleRule
		{ after(grammarAccess.getModelAccess().getElementsRuleParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__UnitIDAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getUnitIDUnitIDParserRuleCall_3_0()); }
		ruleUnitID
		{ after(grammarAccess.getRuleAccess().getUnitIDUnitIDParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__BehavioursAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getBehavioursBehaviourParserRuleCall_4_0()); }
		ruleBehaviour
		{ after(grammarAccess.getRuleAccess().getBehavioursBehaviourParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitID__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnitIDAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getUnitIDAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
